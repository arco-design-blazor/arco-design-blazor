@namespace ArcoDesign.Components
@using ArcoDesign.Extensions;
@using System.Text.RegularExpressions;

@inherits ButtonBase

@if (!string.IsNullOrEmpty(Href))
{
    <a 
        style="@styles"
        class="@classNames"
        href="@Href.RenderIf(Disabled)"
        @onclick="HandClick"
        @onclick:preventDefault="shouldPreventDefault">
        @InnerContent
    </a>
}
else
{
    <button style="@styles"
        class="@classNames"
        type="@HtmlType.ToEnumName()"
        disabled="@Disabled"
        @onclick="HandClick"
        @onclick:preventDefault="shouldPreventDefault">
        @InnerContent
    </button>
}


@code {
    private readonly string prefixCls = "arco-btn";
    private bool isTowCNChar = false;
    private static Regex regexTwoCNChar = new Regex("^[\u4e00-\u9fa5]{2}$");
    private bool shouldPreventDefault = false;

    [Parameter]
    public ButtonHtmlType HtmlType { get; set; } = ButtonHtmlType.Button;

    private RenderFragment IconNode
    {
        get
        {
            if (Loading)
            {
                return __builder =>
                {
                    <IconLoading />
                };
            }

            return __builder =>
            {
                @Icon
            };
        }
    }

    private RenderFragment InnerContent
    {
        get
        {
            return __builder =>
            {
                @IconNode
                @ChildContent
            };
        }
    }


    protected override void OnInitialized()
    {
        var type = Type == ButtonType.Default ? "secondary" : $"{Type.ToEnumName()}";

        var text = ChildContent.GetText();
        isTowCNChar = regexTwoCNChar.IsMatch(text);

        classNameBuilder
            .Add(prefixCls)
            .Add($"{prefixCls}-{type}")
            .Add($"{prefixCls}-size-{Size.ToEnumName()}")
            .Add($"{prefixCls}-shape-{Shape.ToEnumName()}")
            .AddIf(Long, $"{prefixCls}-long")
            .AddIf(Status != ButtonStatus.Default, $"{prefixCls}-status-{Status.ToEnumName()}")
            .AddIf(LoadingFixedWidth, $"{prefixCls}-loading-fixed-width")
            .AddIf(this.Loading, $"{prefixCls}-loading")
            .AddIf(!string.IsNullOrEmpty(this.Href), $"{prefixCls}-link")
            .AddIf(IconOnly || (ChildContent.IsNullOrEmpty() && !IconNode.IsNullOrEmpty()), $"{prefixCls}-icon-only")
            .AddIf(Disabled, $"{prefixCls}-disabled")
            .AddIf(isTowCNChar, $"{prefixCls}-two-chinese-chars")
            .AddIf(Rtl.HasValue && Rtl.Value, $"{prefixCls}-rtl");

        base.OnInitialized();
    }

    private async Task HandClick(MouseEventArgs args)
    {
        if (Loading)
        {
            shouldPreventDefault = true;
            return;
        }
        if (OnClick.HasValue)
            await OnClick.Value.InvokeAsync(args);
    }



    public enum ButtonHtmlType
    {
        Button = 0,
        Reset,
        Submit,
    }
}


